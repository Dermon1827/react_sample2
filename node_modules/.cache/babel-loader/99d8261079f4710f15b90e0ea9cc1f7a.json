{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\harud\\\\sample2\\\\src\\\\Game.js\",\n    _s = $RefreshSig$();\n\nimport { useState } from 'react';\nimport Board from './Board';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Game = () => {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null),\n    point: null\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [movesOrder, setMovesOrder] = useState(false);\n\n  const handleClick = i => {\n    const copyHistory = history.slice(0, stepNumber + 1);\n    const current = copyHistory[copyHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares).winner || squares[i]) {\n      return;\n    }\n\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(copyHistory.concat([{\n      squares: squares,\n      point: i\n    }]));\n    setStepNumber(copyHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpTo = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const current = history[stepNumber];\n  const {\n    winner,\n    winLine,\n    isDraw\n  } = calculateWinner(current.squares);\n  const moves = history.map((step, move) => {\n    const col = step.point % 3 + 1;\n    const row = step.point / 3 + 1 | 0;\n    const goToMove = 'Go to move #' + move + '(' + col + ', ' + row + ')';\n    const desc = move ? goToMove : 'Go to game start';\n    return /*#__PURE__*/_jsxDEV(\"li\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => jumpTo(move),\n        className: move === stepNumber ? 'bold' : '',\n        children: desc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, move, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  });\n\n  if (movesOrder) {\n    moves.reverse();\n  }\n\n  let status;\n\n  if (winner) {\n    status = \"Winner: \" + winner;\n  } else {\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\n  }\n\n  if (isDraw) {\n    status = 'Draw';\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {\n        squares: current.squares,\n        onClick: i => handleClick(i),\n        winLine: winLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: status\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setMovesOrder(!movesOrder);\n        },\n        children: 'ASKâ‡”DESK'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {\n        children: moves\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Game, \"0Lt+Jlm7k65PU/PD1SwCjv0UMD4=\");\n\n_c = Game;\n\nconst calculateWinner = squares => {\n  const lines = [[0, 1, 2], [3, 4, 5], [6, 7, 8], [0, 3, 6], [1, 4, 7], [2, 5, 8], [0, 4, 8], [2, 4, 6]];\n  const result = {\n    winner: null,\n    winLine: [],\n    isDraw: false\n  };\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      result.winner = squares[a];\n      result.winLine = result.winLine.concat(lines[i]);\n    }\n  }\n\n  if (result.winner === null && !squares.includes(null)) {\n    result.isDraw = true;\n  }\n\n  return result;\n};\n\nexport default Game;\n\nvar _c;\n\n$RefreshReg$(_c, \"Game\");","map":{"version":3,"sources":["C:/Users/harud/sample2/src/Game.js"],"names":["useState","Board","Game","history","setHistory","squares","Array","fill","point","stepNumber","setStepNumber","xIsNext","setXIsNext","movesOrder","setMovesOrder","handleClick","i","copyHistory","slice","current","length","calculateWinner","winner","concat","jumpTo","step","winLine","isDraw","moves","map","move","col","row","goToMove","desc","reverse","status","lines","result","a","b","c","includes"],"mappings":"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","sourcesContent":["import {useState} from 'react';\r\nimport Board from './Board';\r\n\r\nconst Game = () => {\r\n  const [history, setHistory] = useState(\r\n    [\r\n      {\r\n        squares: Array(9).fill(null),\r\n        point: null\r\n      }\r\n    ]\r\n  );\r\n  const [stepNumber, setStepNumber] = useState(0);\r\n  const [xIsNext, setXIsNext] = useState(true);\r\n  const [movesOrder, setMovesOrder] = useState(false);\r\n\r\n  const handleClick = (i) => {\r\n    const copyHistory = history.slice(0, stepNumber + 1);\r\n    const current = copyHistory[copyHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n    if (calculateWinner(squares).winner || squares[i]) {\r\n      return;\r\n    }\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(\r\n      copyHistory.concat(\r\n        [\r\n          {\r\n            squares: squares,\r\n            point: i\r\n          }\r\n        ]\r\n      )\r\n    );\r\n    setStepNumber(copyHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  };\r\n\r\n  const jumpTo = (step) => {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  };\r\n\r\n  const current = history[stepNumber];\r\n  const {winner, winLine, isDraw} = calculateWinner(current.squares);\r\n  const moves = history.map((step, move) => {\r\n    const col = step.point % 3 + 1;\r\n    const row = (step.point / 3 + 1) | 0;\r\n    const goToMove = 'Go to move #' + move + '(' + col + ', ' + row + ')';\r\n    const desc = move ? goToMove : 'Go to game start';\r\n    return (\r\n      <li key={move}>\r\n        <button\r\n          onClick={() => jumpTo(move)}\r\n          className={move === stepNumber ? 'bold' : ''}\r\n        >\r\n          {desc}\r\n        </button>\r\n      </li>\r\n    );\r\n  });\r\n\r\n  if (movesOrder) {\r\n    moves.reverse();\r\n  }\r\n\r\n  let status;\r\n  if (winner) {\r\n    status = \"Winner: \" + winner;\r\n  } else {\r\n    status = \"Next player: \" + (xIsNext ? \"X\" : \"O\");\r\n  }\r\n  if (isDraw) {\r\n    status = 'Draw';\r\n  }\r\n\r\n  return (\r\n    <div className=\"game\">\r\n      <div className=\"game-board\">\r\n        <Board\r\n          squares={current.squares}\r\n          onClick={i => handleClick(i)}\r\n          winLine={winLine}\r\n        />\r\n      </div>\r\n      <div className=\"game-info\">\r\n        <div>{status}</div>\r\n        <button onClick={() => {setMovesOrder(!movesOrder)}}>\r\n          {'ASKâ‡”DESK'}\r\n        </button>\r\n        <ol>{moves}</ol>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst calculateWinner = (squares) => {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6]\r\n  ];\r\n  const result = {\r\n    winner: null,\r\n    winLine: [],\r\n    isDraw: false\r\n  }\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i];\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      result.winner = squares[a];\r\n      result.winLine = result.winLine.concat(lines[i]);\r\n    }\r\n  }\r\n  if (result.winner === null && !squares.includes(null)) {\r\n    result.isDraw = true;\r\n  }\r\n  return result;\r\n};\r\n\r\nexport default Game;"]},"metadata":{},"sourceType":"module"}