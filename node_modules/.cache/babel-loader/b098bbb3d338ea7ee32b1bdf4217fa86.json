{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\";\nimport { calculateWinner } from \"../utils/calculateWinner\";\nexport const useGameControl = () => {\n  _s();\n\n  const [history, setHistory] = useState([{\n    squares: Array(9).fill(null)\n  }]);\n  const [stepNumber, setStepNumber] = useState(0);\n  const [xIsNext, setXIsNext] = useState(true);\n  const [colAndRows, setColAndRows] = useState([]);\n  const [reverseFlg, setReverseFlg] = useState(false);\n\n  const handleClickSquare = i => {\n    const copyedHistory = history.slice(0, stepNumber + 1);\n    const current = history[copyedHistory.length - 1];\n    const squares = current.squares.slice();\n\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n\n    let nextColAndRow = [];\n\n    if (i === 0) {\n      nextColAndRow = [0, 0];\n    } else if (i === 1) {\n      nextColAndRow = [0, 1];\n    } else if (i === 2) {\n      nextColAndRow = [0, 2];\n    } else if (i === 3) {\n      nextColAndRow = [1, 0];\n    } else if (i === 4) {\n      nextColAndRow = [1, 1];\n    } else if (i === 5) {\n      nextColAndRow = [1, 2];\n    } else if (i === 6) {\n      nextColAndRow = [2, 0];\n    } else if (i === 7) {\n      nextColAndRow = [2, 1];\n    } else if (i === 8) {\n      nextColAndRow = [2, 2];\n    }\n\n    let slicedColAndRows = colAndRows.slice(0, stepNumber);\n    slicedColAndRows.push(nextColAndRow);\n    setColAndRows(slicedColAndRows);\n    squares[i] = xIsNext ? \"X\" : \"O\";\n    setHistory(copyedHistory.concat([{\n      squares: squares\n    }]));\n    setStepNumber(copyedHistory.length);\n    setXIsNext(!xIsNext);\n  };\n\n  const jumpToPast = step => {\n    setStepNumber(step);\n    setXIsNext(step % 2 === 0);\n  };\n\n  const reverseHistoryInf = () => {\n    setReverseFlg(!reverseFlg);\n  };\n\n  return {\n    history,\n    stepNumber,\n    xIsNext,\n    colAndRows,\n    reverseFlg,\n    handleClickSquare,\n    jumpToPast,\n    reverseHistoryInf\n  };\n};\n\n_s(useGameControl, \"Gx9MvrSVLrxZyik1ri57+fLIWaw=\");","map":{"version":3,"sources":["C:/Users/harud/sample2/src/hooks/useGameControl.ts"],"names":["useState","calculateWinner","useGameControl","history","setHistory","squares","Array","fill","stepNumber","setStepNumber","xIsNext","setXIsNext","colAndRows","setColAndRows","reverseFlg","setReverseFlg","handleClickSquare","i","copyedHistory","slice","current","length","nextColAndRow","slicedColAndRows","push","concat","jumpToPast","step","reverseHistoryInf"],"mappings":"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","sourcesContent":["import {useState} from \"react\";\r\nimport {historyType} from \"../types/historyType\";\r\nimport {calculateWinner} from \"../utils/calculateWinner\";\r\n\r\nexport const useGameControl = () => {\r\n  const [history, setHistory] = useState<Array<historyType>>([{squares: Array(9).fill(null)}])\r\n  const [stepNumber, setStepNumber] = useState<number>(0);\r\n  const [xIsNext, setXIsNext] = useState<boolean>(true);\r\n  const [colAndRows, setColAndRows] = useState<Array<Array<number>>>([]);\r\n  const [reverseFlg, setReverseFlg] = useState(false);\r\n\r\n  const handleClickSquare = (i: number) => {\r\n\r\n    const copyedHistory = history.slice(0, stepNumber + 1);\r\n    const current = history[copyedHistory.length - 1];\r\n    const squares = current.squares.slice();\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return;\r\n    }\r\n\r\n    let nextColAndRow:Array<number> = [];\r\n    if(i === 0){\r\n      nextColAndRow = [0,0];\r\n    }else if(i === 1){\r\n      nextColAndRow = [0,1];\r\n    }else if(i === 2){\r\n      nextColAndRow = [0,2];\r\n    }else if(i === 3){\r\n      nextColAndRow = [1,0];\r\n    }else if(i === 4){\r\n      nextColAndRow = [1,1];\r\n    }else if(i === 5){\r\n      nextColAndRow = [1,2];\r\n    }else if(i === 6){\r\n      nextColAndRow = [2,0];\r\n    }else if(i === 7){\r\n      nextColAndRow = [2,1];\r\n    }else if(i === 8){\r\n      nextColAndRow = [2,2];\r\n    }\r\n    let slicedColAndRows = colAndRows.slice(0, stepNumber);\r\n    slicedColAndRows.push(nextColAndRow);\r\n    setColAndRows(slicedColAndRows);\r\n\r\n    squares[i] = xIsNext ? \"X\" : \"O\";\r\n    setHistory(copyedHistory.concat([\r\n      {\r\n        squares: squares\r\n      }\r\n    ]));\r\n    setStepNumber(copyedHistory.length);\r\n    setXIsNext(!xIsNext);\r\n  }\r\n\r\n  const jumpToPast = (step: number) => {\r\n    setStepNumber(step);\r\n    setXIsNext((step % 2) === 0);\r\n  }\r\n\r\n  const reverseHistoryInf = () => {\r\n    setReverseFlg(!reverseFlg);\r\n  }\r\n\r\n  return {history, stepNumber, xIsNext, colAndRows, reverseFlg, handleClickSquare, jumpToPast, reverseHistoryInf};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}